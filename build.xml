<!-- Copyright (c) 2011 Value Pay Services, LLC. All rights reserved. -->

<project name="poker" default="help" basedir=".">
  <description>
    Simple poker hand evaluator
  </description>

  <property environment="env" />

  <property name="src" location="src" />
  <property name="src-unit" location="test/unit" />
  <property name="lib" location="lib" />
  <property name="gen" location="gen" />
  <property name="version.file" location="VERSION" />
  <property name="version.gen.file" location="${gen}/classes/${ant.project.name}.version" />
  <property name="build.number" value="0" />

  <path id="cp">
    <fileset dir="${lib}/" />
    <pathelement location="${gen}/classes" />
    <pathelement location="${gen}/unit" />
  </path>

  <target name="echo">
    <echoproperties />
  </target>

  <target name="help">
    <echo message="run 'ant -projecthelp' to see a list of valid targets" />
  </target>
  <target name="initTests" unless="test.pattern">
    <property name="test.pattern" value="**/*Test.class" />
    <property name="spec.pattern" value="**/*Spec.class" />
  </target>

  <target name="init" depends="hg-version, initTests">
    <mkdir dir="${gen}" />
    <mkdir dir="${gen}/classes" />
    <mkdir dir="${gen}/unit" />
    <mkdir dir="${gen}/dist" />
    <mkdir dir="${gen}/build" />
 </target>

  <target name="clean" description="Clean up">
    <delete dir="${gen}" />
  </target>

  <target name="hg-version" description="Get the current version from Mercurial">
    <touch file="${version.gen.file}" mkdirs="true" />

    <loadfile property="version.project.tmp" srcFile="${version.file}" />
    <echo file="${version.gen.file}">${version.project.tmp}</echo>
    <replaceregexp file="${version.gen.file}" match="\n" replace="" />
    <loadfile property="version.project" srcFile="${version.gen.file}" />

    <exec executable="hg" outputproperty="revision.local.tmp">
      <arg value="id" />
      <arg value="-n" />
    </exec>
    <echo file="${version.gen.file}">${revision.local.tmp}</echo>
    <replaceregexp file="${version.gen.file}" match="\+" replace="" />
    <loadfile property="revision.local" srcFile="${version.gen.file}" />

    <exec executable="hg" outputproperty="revision.global.tmp">
      <arg value="id" />
      <arg value="-i" />
    </exec>
    <echo file="${version.gen.file}">${revision.global.tmp}</echo>
    <replaceregexp file="${version.gen.file}" match="\+" replace="" />
    <loadfile property="revision.global" srcFile="${version.gen.file}" />

    <property name="version" value="${version.project}.${revision.local}.${revision.global}" />
    <echo file="${version.gen.file}">${version}</echo>
    <copy file="${version.gen.file}" toDir="${gen}/build" />

    <property name="package.version" value="${version.project}.${revision.local}" />
    <echo message="Package version: ${package.version}" />

    <echo message="Build version: ${version} (global revision ${revision.global})" />
  </target>

  <target name="compile" depends="init, compile-resources" description="Compile the source ">

    <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="cp" />

    <groovyc srcdir="${src}" destdir="${gen}/classes" classpathref="cp">
      <javac source="1.7" target="1.7" debug="on" />
    </groovyc>

    <groovyc srcdir="${src-unit}" destdir="${gen}/unit" classpathref="cp">
      <javac source="1.7" target="1.7" debug="on" />
    </groovyc>
  </target>

  <target name="compile-resources" description="Copy resources required by source">
    <copy toDir="${gen}/classes">
      <fileset dir="${src-unit}">
        <exclude name="**/*.groovy" />
      </fileset>
    </copy>
  </target>

  <property name="test.formatter" value="xml"/>
  <property name="test.useFile" value="true"/>
  <property name="test.haltOnError" value="no"/>
  <property name="test.haltOnFailure" value="no"/>

  <target name="test" depends="compile" description="Run jUnit test classes">

    <delete dir="${gen}/unit/RESULTS" />
    <mkdir dir="${gen}/unit/RESULTS" />
    <mkdir dir="${gen}/unit/RESULTS/html" />

    <junit printsummary="yes" haltonerror="${test.haltOnError}" haltonfailure="${test.haltOnFailure}" fork="false" failureproperty="testFailed">
      <formatter type="${test.formatter}" usefile="${test.useFile}" />
      <batchtest todir="${gen}/unit/RESULTS">
        <fileset dir="${gen}/unit">
          <include name="${test.pattern}" />
          <include name="${spec.pattern}" />
        </fileset>
      </batchtest>
      <classpath refid="cp" />
      <classpath path="conf" />
    </junit>

    <junitreport todir="${gen}/unit/RESULTS">
      <fileset dir="${gen}/unit/RESULTS">
        <include name="TEST-*.xml" />
      </fileset>
      <!--<report format="frames" todir="${gen}/unit/RESULTS/html"/>-->
      <report todir="${gen}/unit/RESULTS/html" />
    </junitreport>

    <echo message="See a pretty report at ${gen}/unit/RESULTS/html/index.html" />
    <fail if="testFailed" message="Unit test(s) failed.  See reports!" />

  </target>

  <target name="ensure-test-name" unless="test">
    <fail message="You must run this target with -Dtest={testName}"/>
  </target>

  <target name="ensure-method-list" unless="methods">
    <fail message="You must run this target with -Dmethods={methods}"/>
  </target>

  <target name="run-test" depends="compile, ensure-test-name, ensure-method-list" description="Run specific jUnit tests">
    <delete dir="${gen}/unit/RESULTS" />
    <mkdir dir="${gen}/unit/RESULTS" />
    <mkdir dir="${gen}/unit/RESULTS/html" />

    <junit printsummary="yes" haltonerror="${test.haltOnError}" haltonfailure="${test.haltOnFailure}" fork="false" failureproperty="testFailed">
      <formatter type="${test.formatter}" usefile="${test.useFile}" />
      <test todir="${gen}/unit/RESULTS" name="${test}" methods="${methods}" />        
      <classpath refid="cp" />
    </junit>

    <fail if="testFailed" message="Unit test(s) failed.  See reports!" />

  </target>

  <target name="doc" depends="test, hg-version">
    <delete dir="${gen}/doc" />
    <mkdir dir="${gen}/doc" />

    <taskdef name="groovydoc" classname="org.codehaus.groovy.ant.Groovydoc" classpathref="cp" />

    <tstamp>
      <format property="year" pattern="yyyy" locale="en,US" />
    </tstamp>

    <property name="org" value="Independent Purchasing Cooperative, Inc." />

    <groovydoc packagenames="**.*" use="true" sourcepath="src" destdir="gen/doc/" doctitle="${ant.project.name} API" windowtitle="${ant.project.name} API" private="true" header="v${version}" footer="Copyright (c) ${year} ${org}. All rights reserved.">
      <link packages="java.,org.xml.,javax.,org.xml." href="http://java.sun.com/j2se/1.5.0/docs/api" />
      <link packages="org.apache.ant.,org.apache.tools.ant." href="http://www.dpml.net/api/ant/1.7.0" />
      <link packages="org.junit.,junit.framework." href="http://junit.sourceforge.net/junit3.8.1/javadoc/" />
      <link packages="groovy.,org.codehaus.groovy." href="http://groovy.codehaus.org/api/" />
    </groovydoc>

    <copy todir="gen/doc" overwrite="true">
      <fileset dir="res/api" />
    </copy>
  </target>

  <target name="jar" depends="compile,test" description="Create the JAR containing the compiled classes">
    <jar jarfile="${gen}/lib/${ant.project.name}-${version}.jar" basedir="${gen}/classes" />
  </target>
</project>
